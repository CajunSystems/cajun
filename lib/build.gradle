/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

tasks.withType(JavaCompile).each {
    it.options.compilerArgs.add('--enable-preview')
}

// Define source sets for core and runtime
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
}

dependencies {
    // Core dependencies (abstract interfaces)
    api 'org.slf4j:slf4j-api:2.0.9'
    
    // Runtime implementation dependencies
    implementation "io.etcd:jetcd-core:0.7.6"
    implementation 'ch.qos.logback:logback-classic:1.4.11'

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    // Mockito for mocking in tests
    testImplementation 'org.mockito:mockito-core:5.7.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.7.0'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = project.hasProperty('mainClass') ? project.getProperty('mainClass') : null
}

tasks.withType(JavaExec) {
    jvmArgs += '--enable-preview'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    jvmArgs(['--enable-preview'])
    useJUnitPlatform {
        // By default, exclude performance tests
        excludeTags 'performance'
    }
}

// Create a separate task for performance tests
tasks.register('performanceTest', Test) {
    description = 'Runs performance tests.'
    group = 'verification'
    
    jvmArgs(['--enable-preview'])
    useJUnitPlatform {
        includeTags 'performance'
    }
    
    // Increase timeouts for performance tests
    systemProperty 'junit.jupiter.execution.timeout.default', '5m'
    
    // Optional: configure test logging
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}
